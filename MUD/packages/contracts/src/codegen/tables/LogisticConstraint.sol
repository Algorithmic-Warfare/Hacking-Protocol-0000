// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { LogisticConstraintType } from "../common.sol";

struct LogisticConstraintData {
  uint256 constraintItemId;
  uint256 constraintItemAmount;
  uint256 operationId;
  LogisticConstraintType constraintType;
  uint256[] constrainedDepotIds;
}

library LogisticConstraint {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "AWAR", name: "LogisticConstrai", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746241574152000000000000000000004c6f676973746963436f6e7374726169);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0061040120202001000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint8, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x006104011f1f1f00810000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "constraintItemId";
    fieldNames[1] = "constraintItemAmount";
    fieldNames[2] = "operationId";
    fieldNames[3] = "constraintType";
    fieldNames[4] = "constrainedDepotIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get constraintItemId.
   */
  function getConstraintItemId(uint256 id) internal view returns (uint256 constraintItemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get constraintItemId.
   */
  function _getConstraintItemId(uint256 id) internal view returns (uint256 constraintItemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set constraintItemId.
   */
  function setConstraintItemId(uint256 id, uint256 constraintItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((constraintItemId)), _fieldLayout);
  }

  /**
   * @notice Set constraintItemId.
   */
  function _setConstraintItemId(uint256 id, uint256 constraintItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((constraintItemId)), _fieldLayout);
  }

  /**
   * @notice Get constraintItemAmount.
   */
  function getConstraintItemAmount(uint256 id) internal view returns (uint256 constraintItemAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get constraintItemAmount.
   */
  function _getConstraintItemAmount(uint256 id) internal view returns (uint256 constraintItemAmount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set constraintItemAmount.
   */
  function setConstraintItemAmount(uint256 id, uint256 constraintItemAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((constraintItemAmount)), _fieldLayout);
  }

  /**
   * @notice Set constraintItemAmount.
   */
  function _setConstraintItemAmount(uint256 id, uint256 constraintItemAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((constraintItemAmount)), _fieldLayout);
  }

  /**
   * @notice Get operationId.
   */
  function getOperationId(uint256 id) internal view returns (uint256 operationId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get operationId.
   */
  function _getOperationId(uint256 id) internal view returns (uint256 operationId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set operationId.
   */
  function setOperationId(uint256 id, uint256 operationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((operationId)), _fieldLayout);
  }

  /**
   * @notice Set operationId.
   */
  function _setOperationId(uint256 id, uint256 operationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((operationId)), _fieldLayout);
  }

  /**
   * @notice Get constraintType.
   */
  function getConstraintType(uint256 id) internal view returns (LogisticConstraintType constraintType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return LogisticConstraintType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get constraintType.
   */
  function _getConstraintType(uint256 id) internal view returns (LogisticConstraintType constraintType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return LogisticConstraintType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set constraintType.
   */
  function setConstraintType(uint256 id, LogisticConstraintType constraintType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(constraintType)), _fieldLayout);
  }

  /**
   * @notice Set constraintType.
   */
  function _setConstraintType(uint256 id, LogisticConstraintType constraintType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(constraintType)), _fieldLayout);
  }

  /**
   * @notice Get constrainedDepotIds.
   */
  function getConstrainedDepotIds(uint256 id) internal view returns (uint256[] memory constrainedDepotIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get constrainedDepotIds.
   */
  function _getConstrainedDepotIds(uint256 id) internal view returns (uint256[] memory constrainedDepotIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set constrainedDepotIds.
   */
  function setConstrainedDepotIds(uint256 id, uint256[] memory constrainedDepotIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((constrainedDepotIds)));
  }

  /**
   * @notice Set constrainedDepotIds.
   */
  function _setConstrainedDepotIds(uint256 id, uint256[] memory constrainedDepotIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((constrainedDepotIds)));
  }

  /**
   * @notice Get the length of constrainedDepotIds.
   */
  function lengthConstrainedDepotIds(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of constrainedDepotIds.
   */
  function _lengthConstrainedDepotIds(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of constrainedDepotIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemConstrainedDepotIds(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of constrainedDepotIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemConstrainedDepotIds(uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to constrainedDepotIds.
   */
  function pushConstrainedDepotIds(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to constrainedDepotIds.
   */
  function _pushConstrainedDepotIds(uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from constrainedDepotIds.
   */
  function popConstrainedDepotIds(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from constrainedDepotIds.
   */
  function _popConstrainedDepotIds(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of constrainedDepotIds at `_index`.
   */
  function updateConstrainedDepotIds(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of constrainedDepotIds at `_index`.
   */
  function _updateConstrainedDepotIds(uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (LogisticConstraintData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (LogisticConstraintData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 constraintItemId,
    uint256 constraintItemAmount,
    uint256 operationId,
    LogisticConstraintType constraintType,
    uint256[] memory constrainedDepotIds
  ) internal {
    bytes memory _staticData = encodeStatic(constraintItemId, constraintItemAmount, operationId, constraintType);

    EncodedLengths _encodedLengths = encodeLengths(constrainedDepotIds);
    bytes memory _dynamicData = encodeDynamic(constrainedDepotIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 constraintItemId,
    uint256 constraintItemAmount,
    uint256 operationId,
    LogisticConstraintType constraintType,
    uint256[] memory constrainedDepotIds
  ) internal {
    bytes memory _staticData = encodeStatic(constraintItemId, constraintItemAmount, operationId, constraintType);

    EncodedLengths _encodedLengths = encodeLengths(constrainedDepotIds);
    bytes memory _dynamicData = encodeDynamic(constrainedDepotIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, LogisticConstraintData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.constraintItemId,
      _table.constraintItemAmount,
      _table.operationId,
      _table.constraintType
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.constrainedDepotIds);
    bytes memory _dynamicData = encodeDynamic(_table.constrainedDepotIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, LogisticConstraintData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.constraintItemId,
      _table.constraintItemAmount,
      _table.operationId,
      _table.constraintType
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.constrainedDepotIds);
    bytes memory _dynamicData = encodeDynamic(_table.constrainedDepotIds);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 constraintItemId,
      uint256 constraintItemAmount,
      uint256 operationId,
      LogisticConstraintType constraintType
    )
  {
    constraintItemId = (uint256(Bytes.getBytes32(_blob, 0)));

    constraintItemAmount = (uint256(Bytes.getBytes32(_blob, 32)));

    operationId = (uint256(Bytes.getBytes32(_blob, 64)));

    constraintType = LogisticConstraintType(uint8(Bytes.getBytes1(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory constrainedDepotIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    constrainedDepotIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (LogisticConstraintData memory _table) {
    (_table.constraintItemId, _table.constraintItemAmount, _table.operationId, _table.constraintType) = decodeStatic(
      _staticData
    );

    (_table.constrainedDepotIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 constraintItemId,
    uint256 constraintItemAmount,
    uint256 operationId,
    LogisticConstraintType constraintType
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(constraintItemId, constraintItemAmount, operationId, constraintType);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory constrainedDepotIds) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(constrainedDepotIds.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory constrainedDepotIds) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((constrainedDepotIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 constraintItemId,
    uint256 constraintItemAmount,
    uint256 operationId,
    LogisticConstraintType constraintType,
    uint256[] memory constrainedDepotIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(constraintItemId, constraintItemAmount, operationId, constraintType);

    EncodedLengths _encodedLengths = encodeLengths(constrainedDepotIds);
    bytes memory _dynamicData = encodeDynamic(constrainedDepotIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
